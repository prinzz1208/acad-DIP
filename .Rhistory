for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(0.5,"sobel"))
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(0.58,"sharpen"))
plot(as.cimg(m))
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(0.58,"sharpen"))
plot(as.cimg(m))
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
m=m-applyFilter(m,convKernel(1.4,"laplacian"))
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
m=m-applyFilter(m,convKernel(2,"laplacian"))
plot(as.cimg(m))
n=100
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
n=100
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
n=100
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
# plot(as.cimg(m2))
m=as.matrix(grayscale(Img))
m=m+applyFilter(m,convKernel(0.4,"sobel"))
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(0.3,"sobel"))
# plot(as.cimg(m2))
m=as.matrix(grayscale(Img))
m=m+applyFilter(m,convKernel(0.3,"sobel"))
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(0.2,"sobel"))
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(0.3,"sobel"))
# plot(as.cimg(m2))
m=as.matrix(grayscale(Img))
m=m+applyFilter(m,convKernel(0.3,"sobel"))
plot(as.cimg(m))
# plot(as.cimg(m2))
m=as.matrix(grayscale(Img))
m=m+applyFilter(m,convKernel(0.2,"sobel"))
plot(as.cimg(m))
# plot(as.cimg(m2))
m=as.matrix(grayscale(Img))
m=m+applyFilter(m,convKernel(0.1,"sobel"))
plot(as.cimg(m))
# plot(as.cimg(m2))
m=as.matrix(grayscale(Img))
m=m+applyFilter(m,convKernel(1,"sobel"))
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(1,"sobel"))
plot(as.cimg(m))
# plot(as.cimg(m2))
m=as.matrix(grayscale(Img))
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(2,"sobel"))
plot(as.cimg(m))
n=100
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(2,"sobel"))
plot(as.cimg(m))
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
# plot(as.cimg(m2))
m=as.matrix(grayscale(Img))
m=m+applyFilter(m,convKernel(2,"sobel"))
plot(as.cimg(m))
m=m-applyFilter(m,convKernel(2,"laplacian"))
plot(as.cimg(m))
n=10
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
n=10
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
n=10
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(2,"laplacian"))
plot(as.cimg(m))
# plot(as.cimg(m2))
m=as.matrix(grayscale(Img))
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(0.5,"laplacian"))
plot(as.cimg(m))
plot(as.cimg(m))
plot(as.cimg(m))
# plot(as.cimg(m2))
m=as.matrix(grayscale(Img))
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(0.1,"laplacian"))
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(2,"sobel"))
plot(as.cimg(m))
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
plot(as.cimg(m))
# plot(as.cimg(m2))
m=as.matrix(grayscale(Img))
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(2,"sobel"))
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(0.58,"sharpen"))
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(0.4,"sharpen"))
plot(as.cimg(m))
n=10
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
n=10
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
n=10
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
# m2=matrix(0,nrow(m)+4,ncol(m)+4)
# plot(as.cimg(medianFilter()))
for (i in 1:nrow(m)) {
for (j in 1:ncol(m)) {
m2[i+2,j+2]=m[i,j]
}
}
plot(as.cimg(medianFilter()))
m=m+applyFilter(m,convKernel(2,"sobel"))
# plot(as.cimg(m2))
m=as.matrix(grayscale(Img))
m=m+applyFilter(m,convKernel(2,"sobel"))
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(0.4,"sharpen"))
plot(as.cimg(m))
plot(as.cimg(medianFilter()))
m=applyFilter(m,convKernel(0.4,"sharpen"))
plot(as.cimg(m))
n=10
for (i in seq_along(n)) {
m=(m+applyFilter(m,convKernel(2,"gaussian")))
# m=m+applyFilter(m,convKernel(0.3,"laplacian"))
}
plot(as.cimg(m))
# plot(as.cimg(photo))
# photo=as.array(photo)
# for (i in 300:x[1]) {
#   for (j in x[2]:400) {
#       photo[i,j,1,1]=photo[i,j,1,1]+1
#   # }
# }
# plot(photo)
# plot(as.cimg((redImage*0.31+greenImage*0.45+blueImage*0.45)))
plot(imshift(photo,1,1))
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
# plot(as.cimg(photo))
# photo=as.array(photo)
# for (i in 300:x[1]) {
#   for (j in x[2]:400) {
#       photo[i,j,1,1]=photo[i,j,1,1]+1
#   # }
# }
# plot(photo)
# plot(as.cimg((redImage*0.31+greenImage*0.45+blueImage*0.45)))
plot(imshift(photo,10,10))
# plot(as.cimg(photo))
# photo=as.array(photo)
# for (i in 300:x[1]) {
#   for (j in x[2]:400) {
#       photo[i,j,1,1]=photo[i,j,1,1]+1
#   # }
# }
# plot(photo)
# plot(as.cimg((redImage*0.31+greenImage*0.45+blueImage*0.45)))
plot(imshift(photo,10))
# plot(as.cimg(photo))
# photo=as.array(photo)
# for (i in 300:x[1]) {
#   for (j in x[2]:400) {
#       photo[i,j,1,1]=photo[i,j,1,1]+1
#   # }
# }
# plot(photo)
# plot(as.cimg((redImage*0.31+greenImage*0.45+blueImage*0.45)))
plot(photo+imshift(photo,10))
# plot(as.cimg(photo))
# photo=as.array(photo)
# for (i in 300:x[1]) {
#   for (j in x[2]:400) {
#       photo[i,j,1,1]=photo[i,j,1,1]+1
#   # }
# }
# plot(photo)
# plot(as.cimg((redImage*0.31+greenImage*0.45+blueImage*0.45)))
plot(grayscale(photo)+imshift(photo,10))
# plot(as.cimg(photo))
# photo=as.array(photo)
# for (i in 300:x[1]) {
#   for (j in x[2]:400) {
#       photo[i,j,1,1]=photo[i,j,1,1]+1
#   # }
# }
# plot(photo)
# plot(as.cimg((redImage*0.31+greenImage*0.45+blueImage*0.45)))
plot(grayscale(photo)+R(imshift(photo,10)))
# plot(as.cimg(photo))
# photo=as.array(photo)
# for (i in 300:x[1]) {
#   for (j in x[2]:400) {
#       photo[i,j,1,1]=photo[i,j,1,1]+1
#   # }
# }
# plot(photo)
# plot(as.cimg((redImage*0.31+greenImage*0.45+blueImage*0.45)))
plot(grayscale(photo)+R(imshift(photo,10)),rescale = FALSE)
# plot(as.cimg(photo))
# photo=as.array(photo)
# for (i in 300:x[1]) {
#   for (j in x[2]:400) {
#       photo[i,j,1,1]=photo[i,j,1,1]+1
#   # }
# }
# plot(photo)
# plot(as.cimg((redImage*0.31+greenImage*0.45+blueImage*0.45)))
plot(grayscale(photo)+R(imshift(photo,10)))
# plot(as.cimg(photo))
# photo=as.array(photo)
# for (i in 300:x[1]) {
#   for (j in x[2]:400) {
#       photo[i,j,1,1]=photo[i,j,1,1]+1
#   # }
# }
# plot(photo)
# plot(as.cimg((redImage*0.31+greenImage*0.45+blueImage*0.45)))
plot(grayscale(photo)+R(imshift(photo,20)))
# plot(as.cimg(photo))
# photo=as.array(photo)
# for (i in 300:x[1]) {
#   for (j in x[2]:400) {
#       photo[i,j,1,1]=photo[i,j,1,1]+1
#   # }
# }
# plot(photo)
# plot(as.cimg((redImage*0.31+greenImage*0.45+blueImage*0.45)))
plot(grayscale(photo)+R(imshift(photo,5)))
# plot(as.cimg(photo))
# photo=as.array(photo)
# for (i in 300:x[1]) {
#   for (j in x[2]:400) {
#       photo[i,j,1,1]=photo[i,j,1,1]+1
#   # }
# }
# plot(photo)
# plot(as.cimg((redImage*0.31+greenImage*0.45+blueImage*0.45)))
plot(grayscale(photo)+B(imshift(photo,5)))
# plot(as.cimg(photo))
# photo=as.array(photo)
# for (i in 300:x[1]) {
#   for (j in x[2]:400) {
#       photo[i,j,1,1]=photo[i,j,1,1]+1
#   # }
# }
# plot(photo)
# plot(as.cimg((redImage*0.31+greenImage*0.45+blueImage*0.45)))
plot(grayscale(photo)+(imshift(redImage,5)))
# plot(as.cimg(photo))
# photo=as.array(photo)
# for (i in 300:x[1]) {
#   for (j in x[2]:400) {
#       photo[i,j,1,1]=photo[i,j,1,1]+1
#   # }
# }
# plot(photo)
# plot(as.cimg((redImage*0.31+greenImage*0.45+blueImage*0.45)))
plot((photo)+(imshift(redImage,5)))
# plot(as.cimg(photo))
# photo=as.array(photo)
# for (i in 300:x[1]) {
#   for (j in x[2]:400) {
#       photo[i,j,1,1]=photo[i,j,1,1]+1
#   # }
# }
# plot(photo)
# plot(as.cimg((redImage*0.31+greenImage*0.45+blueImage*0.45)))
plot((photo)+(imshift(redImage,10)))
photo_gray=array(grayscale(photo),dim=x)
plot((photo_gray)+(imshift(redImage,10)))
plot((photo_gray)+(imshift(redImage,20)))
plot((photo_gray)+(imshift(redImage,20))+(imshift(redImage,-20)))
plot((photo_gray)+(imshift(redImage,20)))
plot(crop.borders((photo_gray)+(imshift(redImage,20))),nPix=2)
plot(crop.borders((photo_gray)+(imshift(redImage,20))))
plot(crop.borders((photo_gray)+(imshift(redImage,20))),2)
plot(crop.borders((photo_gray)+(imshift(redImage,20))),2,2)
?crop.borders
plot(crop.borders((photo_gray)+(imshift(redImage,20)),nPix = 2))
plot(crop.borders((photo_gray)+(imshift(redImage,20)),nPix = 3))
plot(crop.borders((photo_gray)+(imshift(redImage,20)),nPix = 5))
plot(crop.borders((photo_gray)+(imshift(redImage,20)),0,5))
plot(crop.borders((photo_gray)+(imshift(redImage,20)),0,10))
plot(crop.borders((photo_gray)+(imshift(redImage,20)),0,10))
plot(crop.borders((photo_gray)+(imshift(redImage,20)),0,60))
plot(crop.borders((photo_gray)+(imshift(redImage,20)),10,0))
plot(crop.borders((photo_gray)+(imshift(redImage,20)),20,0))
plot(crop.borders((photo_gray)+(imshift(redImage,15)),20,0))
plot(crop.borders((photo_gray)+(imshift(redImage,15)+(imshift(greenImage,5)+(imshift(blueImage,-15)),20,0))
plot(crop.borders((photo_gray)+(imshift(redImage,15)+(imshift(greenImage,5)+(imshift(blueImage,-15)))),20,0))
plot(crop.borders((photo_gray)+(imshift(redImage,15)+(imshift(blueImage,-15)))),20,0))
plot(crop.borders((photo_gray)+(imshift(redImage,15)+(imshift(blueImage,-15))),20,0))
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
BC=1.1
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
plot(crop.borders((photo_gray)+(imshift(redImage*RC,15,15)+(imshift(blueImage*BC,-15,-15))),20,20))
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/bilateral filtering.R')
# plot(as.cimg(m2))
m=as.matrix(grayscale(Img))
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(2,"sobel"))
plot(as.cimg(m))
# plot(as.cimg(m2))
m=as.matrix(grayscale(Img))
plot(as.cimg(m))
# plot(as.cimg(m2))
m=as.matrix(grayscale(Img))
m=m+applyFilter(m,convKernel(2,"sobel"))
plot(as.cimg(m))
m=m+applyFilter(m,convKernel(0.1,"laplacian"))
plot(as.cimg(m))
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
# photo=boxblur(photo,2)
plot(photo)
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
salt=function(n){
for (k in seq_len(n))
{
i=round(runif(1,1,nrow(m)))
# i=round(runif(1,1,5))
j=round(runif(1,1,ncol(m)))
# j=round(runif(1,1,5))
m[i,j]=1.00;
}
return(m)
}
pepper=function(n){
for (k in seq_len(n))
{
i=round(runif(1,1,nrow(m)))
# i=round(runif(1,1,5))
j=round(runif(1,1,ncol(m)))
# j=round(runif(1,1,5))
m[i,j]=0.00;
}
return(m)
}
m=salt(500)
m=pepper(500)
source('~/Desktop/Work/Digital Image Processing/gitHub/MeanFilters.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/OrderStatisticFilters.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/OrderStatisticFilters.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/OrderStatisticFilters.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/OrderStatisticFilters.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/MeanFilters.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/MeanFilters.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/MeanFilters.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/MeanFilters.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/MeanFilters.R')
?threshold()
Img=threshold(Img)
plot(Img)
Img=threshold(grayscale(Img))
source('~/Desktop/Work/Digital Image Processing/gitHub/logical.R')
Img=load.image("~/Desktop/Work/Digital Image Processing/gitHub/bird.jpg")
Img2=load.image("~/Desktop/Work/Digital Image Processing/gitHub/mario.jpg")
Img=resize(Img,300,300)
GrayImg=threshold(grayscale(Img))
GrayImg2=threshold(grayscale(Img2))
plot(GrayImg & GrayImg2)
GrayImg2=threshold(grayscale(Img2))
source('~/Desktop/Work/Digital Image Processing/gitHub/logical.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/logical.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/logical.R')
plot(GrayImg)
plot(GrayImg2)
plot(GrayImg & GrayImg2)
plot(GrayImg | GrayImg2)
plot(GrayImg)
plot(GrayImg)
plot(GrayImg2)
plot(GrayImg & GrayImg2)
plot(GrayImg | GrayImg2)
source('~/Desktop/Work/Digital Image Processing/gitHub/apnaFilter.R')
# photo=boxblur(photo,2)
plot(photo)
source('~/Desktop/Work/Digital Image Processing/gitHub/bit Plane.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/Fourier.R')
setwd("~/Desktop/Work/Digital Image Processing/gitHub")
source('~/Desktop/Work/Digital Image Processing/gitHub/Fourier.R')
source('~/Desktop/Work/Digital Image Processing/gitHub/Fourier.R')
library(imager)
Im=load.image("mario.jpeg")
Fimg=FFT(resize(Im,300,300))
Im=load.image("mario.jpeg")
Fimg=FFT(resize(Im,256,256))
Fm=matrix(complex(Fimg$real,Fimg$imag))
filter=matrix(0,nrow(Fm),ncol(Fm))
distance=filter
for (i in 1:nrow(Fm)) {
for (j in 1:ncol(Fm)) {
distance[i,j]=sqrt((i-((nrow(Fm)/2)^2))+(j-((ncol(Fm)/2)^2)))
}
}
cutOff <- max(distance) * 0.03
for(x in 1:nrow(Fm)){
for(y in 1: ncol(Fm)){
filter[x,y] <-  1 - (1/(1 + (distance[x,y]/cutOff)^11))
}
}
FilterImg=filter*Fimg
Img=FFT(Re(FilterImg),Im(FilterImg),inverse = TRUE)
